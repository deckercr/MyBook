// Katelyn Holt
// Recycled code from AddStudentsForm generated by Rick Decker
// CISS 311, Advanced Agile, C# Champions Final Project, Project 1

using System;
using System.Windows.Forms;

namespace ProjectOne
{
    public partial class AddCourseForm : Form
    {
        // Private field to manage database operations
        private readonly DatabaseManager _databaseManager;

        // Constructor for the AddCourseForm
        public AddCourseForm()
        {
            // Initialize the form components
            InitializeComponent();

            // Create an instance of DatabaseManager
            _databaseManager = new DatabaseManager();

            // Initialize the database
            if (!_databaseManager.Initialize())
            {
                MessageBox.Show("Failed to initialize the database. Unable to add courses.",
                    "Database Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);
                this.Close();
            }

            // Optional: Set up form load event to do any additional setup
            this.Load += AddCourseForm_Load;
        }

        // Form load event handler
        private void AddCourseForm_Load(object sender, EventArgs e)
        {
            // Optional additional setup
            // For example, setting focus or preparing form elements
            courseTitleTextBox.Focus();
        }

        // Event handler for the Save button click
        private void saveButton_Click(object sender, EventArgs e)
        {
            // Validate input fields
            string courseTitle = courseTitleTextBox.Text.Trim();
            string semesterOffered = semesterOfferedTextBox.Text.Trim();

            // Perform comprehensive input validation
            if (string.IsNullOrEmpty(courseTitle))
            {
                MessageBox.Show("Please enter a course title.",
                    "Validation Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning);
                courseTitleTextBox.Focus();
                return;
            }

            if (string.IsNullOrEmpty(semesterOffered))
            {
                MessageBox.Show("Please enter the semester offered.",
                    "Validation Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Warning);
                semesterOfferedTextBox.Focus();
                return;
            }

            // Attempt to add the course
            try
            {
                string generatedCourseID;
                bool isAdded = _databaseManager.AddCourse(courseTitle, semesterOffered, out generatedCourseID);

                if (isAdded)
                {
                    // Success message
                    MessageBox.Show($"Course added successfully! Generated Course ID: {generatedCourseID}",
                        "Success",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Information);

                    // Clear the input fields
                    ClearInputFields();
                }
                else
                {
                    // Failure message
                    MessageBox.Show("Failed to add course. Please try again or contact support.",
                        "Add Course Error",
                        MessageBoxButtons.OK,
                        MessageBoxIcon.Error);
                }
            }
            catch (Exception ex)
            {
                // Unexpected error handling
                MessageBox.Show($"An unexpected error occurred: {ex.Message}",
                    "Error",
                    MessageBoxButtons.OK,
                    MessageBoxIcon.Error);

                // Log the full exception details for debugging
                System.Diagnostics.Debug.WriteLine($"Course Addition Error: {ex}");
            }
        }

        // Event handler for the Clear button click
        private void clearButton_Click(object sender, EventArgs e)
        {
            // Call method to clear input fields
            ClearInputFields();
        }

        // Event handler for the Close button click
        private void closeButton_Click(object sender, EventArgs e)
        {
            // Close the current form
            this.Close();
        }

        // Method to clear input fields and reset focus
        private void ClearInputFields()
        {
            // Clear text boxes
            courseTitleTextBox.Clear();
            semesterOfferedTextBox.Clear();

            // Set focus to the course title text box
            courseTitleTextBox.Focus();
        }

        // Clean up resources when the form is closing
        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            // Dispose of the database manager to release resources
            _databaseManager?.Dispose();

            // Call the base class implementation
            base.OnFormClosing(e);
        }
    }
}
